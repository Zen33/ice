import deepmerge from 'deepmerge';
import { addAppLifeCyle } from './appCycles';
import { SHOW, LAUNCH, ERROR, HIDE, TAB_ITEM_CLICK, NOT_FOUND, SHARE, UNHANDLED_REJECTION } from './constants';

<% if (!isMiniapp) {%>
import RuntimeModule from './runtimeModule';
import loadRuntimeModules from './loadRuntimeModlues';
<% } %>

import { createHistory } from './history';

let appJSONConfig = {};
<% if (appJsonConfig) {%>
  appJSONConfig = require('../../<%= appJsonConfig %>');
<% } %>

const DEFAULE_APP_CONFIG = {
  app: {
    rootId: 'root'
  },
  router: {
    type: 'hash'
  }
}

let launched = false;

function _handleAppConfig(appConfig, env) {
  const { isWeChatMiniProgram, isByteDanceMicroApp, isMiniApp } = env;
  const { onLaunch, onShow, onError, onHide, onTabItemClick } = appConfig;
  // multi-end valid lifecycle
  // Add app lanuch callback
  addAppLifeCyle(LAUNCH, onLaunch);
  // Add app show callback
  addAppLifeCyle(SHOW, onShow);
  // Add app error callback
  addAppLifeCyle(ERROR, onError);
  // Add app hide callback
  addAppLifeCyle(HIDE, onHide);
  // Add tab bar item click callback
  addAppLifeCyle(TAB_ITEM_CLICK, onTabItemClick);
  // Add lifecycle callbacks which only valid in Wechat MiniProgram and ByteDance MicroApp
  if (isWeChatMiniProgram || isByteDanceMicroApp) {
    const { onPageNotFound, onShareAppMessage } = appConfig;
    // Add global share callback
    addAppLifeCyle(SHARE, onShareAppMessage);
    // Add page not found callback
    addAppLifeCyle(NOT_FOUND, onPageNotFound);
  }
  // Add lifecycle callbacks which only valid in Alibaba MiniApp
  if (isMiniApp) {
    const { onShareAppMessage, onUnhandledRejection } = appConfig;
    // Add global share callback
    addAppLifeCyle(SHARE, onShareAppMessage);
    // Add unhandledrejection callback
    addAppLifeCyle(UNHANDLED_REJECTION, onUnhandledRejection);
  }
}

function createApp(appConfig, options = {}) {
  if (launched) throw new Error('Error: runApp can only be called once.');
  if (appConfig && Object.prototype.toString.call(appConfig) !== '[object Object]') {
    throw new Error('Error: the runApp method param can only be Object.');
  }

  launched = true;

  appConfig = deepmerge(DEFAULE_APP_CONFIG, appConfig);

  // Set runtime modules
  let runtime = {};

  <% if (!isMiniapp) {%>
    // Set history
    const { router } = appConfig;
    const { type, basename, history: customHistory } = router;
    const history = customHistory || createHistory(type, basename);
    appConfig.router.history = history;

    // TODOï¼š
    runtime = new RuntimeModule(appConfig);
    loadRuntimeModules(runtime);
  <% } %>

  // Set app lifeCyle
  const { env } = options;
  _handleAppConfig(appConfig, env);

  return {
    history,
    runtime,
    appConfig,
    appJSONConfig: appJSONConfig.default || appJSONConfig
  };
};

export default createApp;
